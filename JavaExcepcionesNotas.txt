

		**** Java Excepciones *****
https://github.com/alura-es-cursos/java-herencia-polimorfismo/tree/clase-7

¿Por qué la JVM usa un Stack?
- Para saber cuál método está siendo ejecutado.
Una pila de Java es parte de la JVM y almacena los métodos que se están ejecutando. 
Además del bloque de código, la pila almacena las variables y referencias de ese 
bloque. Entonces, la JVM organiza la ejecución y sabe exactamente qué método se 
está ejecutando, que es siempre el método en la parte superior de la pila. 
La JVM también sabe qué otros aún deben ejecutarse, que son precisamente los 
métodos que continúan.

-Para organizar la ejecución de los métodos.
Una pila de Java es parte de la JVM y almacena los métodos que se están ejecutando. 
Además del bloque de código, la pila almacena las variables y referencias de ese 
bloque. Entonces, la JVM organiza la ejecución y sabe exactamente qué método se está
ejecutando, que es siempre el método en la parte superior de la pila. La JVM también
sabe qué otros aún deben ejecutarse, que son precisamente los métodos que continúan.

La excepciones son objetos que tiene nombre, mensaje.
 Los errores que queremos controlar nos ayudará a crear las excepciones.

Las excepciones en Java:
- Las excepciones no controladas caen en la pila de ejecución en busca de alguien 
que pueda manejarlas.
- Toda excepción en Java tiene un nombre que la idenfica. Este enfoque hace que 
sea más fácil de entender que usar números mágicos (códigos de error) como 15, 7012 o 16.

El código anterior a través de Multi- Catch:
try {
    System.out.println(1 / 0);
} catch (ArithmeticException | NullPointerException ex) { 
    ex.printStackTrace();
}
A través de un | (pipe) en la cláusula catch, podemos capturar más de una excepción.
Con eso, podemos tener un solo bloque para manejar una o más excepciones.


Si no se maneja, la excepción cambia el flujo de ejecución del programa.
Si no se trata, la excepción cambia el flujo de ejecución del programa y finalizándolo abruptamente.

Para manejar la excepción, use el bloque try y catch.
Con el bloque try y catch, manejamos una excepción que puede ocurrir mientras 
nuestro programa se está ejecutando, tratándolo de antemano con un código específico.

throw ae; //throw - Lanza la excepcion: lanza la bomba
//abajo del throw no debe haber lineas de codigo porque no sera ejecutadas.
//Solo podemos hacer throw de objetos que son excepciones

No es suficiente crear una instancia de la excepción, es necesario lanzarlo a 
través del throw.

private static void metodo2() {
    System.out.println("Inicio del metodo2"); 
    ArithmeticException exception = new ArithmeticException();
    throw exception;
}























